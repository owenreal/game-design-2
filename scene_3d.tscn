[gd_scene load_steps=10 format=3 uid="uid://b2ownikcmblr7"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_qt2g1"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_s5fx5"]
sky_material = SubResource("ProceduralSkyMaterial_qt2g1")

[sub_resource type="Environment" id="Environment_dscxw"]
background_mode = 2
sky = SubResource("Sky_s5fx5")
tonemap_mode = 2

[sub_resource type="PlaneMesh" id="PlaneMesh_3vbou"]
size = Vector2(500, 500)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_jby26"]
albedo_color = Color(0.468434, 0.359269, 0.462267, 1)

[sub_resource type="GDScript" id="GDScript_5h67k"]
script/source = "extends CharacterBody3D


const SPEED = 5.0
const JUMP_VELOCITY = 4.5

const CAM_SENS = 0.03
@onready var camera = $head/Camera3D
var first_person = true

const BOB_FREQ = 2.4
const BOB_AMP = 0.08
var t_bob = 0.0


func _ready() -> void:
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventMouseMotion and \\
	Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		if first_person:
			self.rotate_y(-event.relative.x * (CAM_SENS / 10.0))
			camera.rotate_x(-event.relative.y * (CAM_SENS / 10.0))
			camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-90), deg_to_rad(90))
	pass

func headbob(time):
	var pos = Vector3.ZERO
	pos.x = cos(time * BOB_FREQ/2) * BOB_AMP
	pos.y = sin(time * BOB_FREQ) * BOB_AMP
	return pos

func _physics_process(delta: float) -> void:
	if Input.is_action_just_pressed(\"ui_cancel\"):
		if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
		else:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	
	# Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta

	# Handle jump.
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir := Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")
	var direction := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)
	
	t_bob += delta * velocity.length() * float(is_on_floor())
	camera.transform.origin = headbob(t_bob)
	
	move_and_slide()
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_juic7"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_py7ks"]
height = 2.00765

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_nc42o"]
albedo_color = Color(0.452116, 0.489925, 2.88785e-07, 1)

[node name="scene_3d" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_dscxw")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
light_indirect_energy = 16.0
light_volumetric_fog_energy = 16.0
shadow_enabled = true

[node name="CSGMesh3D" type="CSGMesh3D" parent="."]
use_collision = true
mesh = SubResource("PlaneMesh_3vbou")
material = SubResource("StandardMaterial3D_jby26")

[node name="player3d" type="CharacterBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.7711, 0)
script = SubResource("GDScript_5h67k")

[node name="MeshInstance3D" type="MeshInstance3D" parent="player3d"]
mesh = SubResource("CapsuleMesh_juic7")

[node name="CollisionShape3D" type="CollisionShape3D" parent="player3d"]
shape = SubResource("CapsuleShape3D_py7ks")

[node name="head" type="Node3D" parent="player3d"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0340518, 0.764707, 0)

[node name="Camera3D" type="Camera3D" parent="player3d/head"]
current = true
fov = 90.0

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(0.9997, 0.00220776, -0.0243978, 0.00722635, 0.925038, 0.379807, 0.0234074, -0.37987, 0.924744, 0.137426, 5.69615, 7.67099)

[node name="CSGBox3D" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.933502, 0.849868, -5.05781)
use_collision = true
size = Vector3(6.02936, 0.347656, 3.88477)
material = SubResource("StandardMaterial3D_nc42o")

[node name="CSGBox3D2" type="CSGBox3D" parent="."]
transform = Transform3D(0.731449, 0, 0.681896, 0, 1, 0, -0.681896, 0, 0.731449, -0.933502, 1.48388, -10.8704)
use_collision = true
size = Vector3(6.02936, 0.347656, 3.88477)
material = SubResource("StandardMaterial3D_nc42o")

[node name="CSGBox3D3" type="CSGBox3D" parent="."]
transform = Transform3D(0.996826, 0, 0.0796074, 0, 1, 0, -0.0796074, 0, 0.996826, 0.852905, 2.47014, -13.7445)
use_collision = true
size = Vector3(2.27737, 0.347656, 1.78369)
material = SubResource("StandardMaterial3D_nc42o")

[node name="CSGBox3D4" type="CSGBox3D" parent="."]
transform = Transform3D(0.996826, 0, 0.0796074, 0, 1, 0, -0.0796074, 0, 0.996826, 0.852905, 2.92953, -16.3435)
use_collision = true
size = Vector3(2.27737, 0.347656, 1.78369)
material = SubResource("StandardMaterial3D_nc42o")
